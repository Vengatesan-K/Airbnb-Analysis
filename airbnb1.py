import streamlit as st
import numpy as np 
import pickle
import streamlit_embedcode as st_embed
from streamlit_lottie import st_lottie
from plotly.subplots import make_subplots
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import matplotlib.pyplot as plt
import psycopg2
from streamlit_extras.add_vertical_space import add_vertical_space
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from streamlit_option_menu import option_menu
import streamlit.components.v1 as components

st.set_page_config(page_title = 'Airbnb Analysis', layout = 'wide',
                    page_icon = "üèöÔ∏è")

reduce_header_height_style = """
    <style>
        div.block-container {padding-top:0rem;}
        div.Sidebar   {padding-top:0rem;}
    </style>
"""
st.markdown(reduce_header_height_style, unsafe_allow_html=True)

hide_st_style ="""
        <style>
        MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}
        </style>
        """      
st.markdown(hide_st_style,unsafe_allow_html=True)

selected = option_menu(None, ["Airbnb","PowerBI","Tableau", "Python"], 
icons=["house-add-fill","microsoft","file-font", "filetype-py"],
default_index=0,
orientation="horizontal",
styles={"nav-link": {"font-size": "25px", "text-align": "center", "margin": "0px", "--hover-color": "red", "transition": "color 0.3s ease, background-color 0.3s ease"},
        "icon": {"font-size": "25px"},
        "container": {"max-width": "5000px", "padding": "10px"},
        "nav-link-selected": {"background-color": "green", "color": "white"},
        "nav-link-0": {"icon": "fa-home", "background-color": "#E01515", "color": "red", "padding-left": "15px"}})

if selected == "Airbnb":
 col1,col2 = st.columns([9,1])
 with col1:
  st.subheader("Welcome to :red[Airbnb] Insights!")
  st.markdown('__<p style="text-align:left; font-size: 70px; color: #FDFEFE ">:black[Exploring the World of Airbnb] </P>__',
                unsafe_allow_html=True)

  st.markdown('__<p style="text-align:left; font-size: 10px; color: #FDFEFE ">:black[About Airbnb] </P>__',
                unsafe_allow_html=True)
  st.write("Airbnb, short for :red[Air Bed & Breakfast] is a globally recognized platform that has revolutionized the way people travel and find accommodations. Founded in 2008 by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk, Airbnb started as a way for hosts to rent out their spare rooms and provide travelers with unique and affordable lodging options. What began as a humble idea has since grown into a hospitality giant, with millions of listings in over 220 countries and regions worldwide.")
  st.markdown('__<p style="text-align:left; font-size: 10px; color: #FDFEFE ">:black[Unlocking Insights with Data Analysis] </P>__',
                unsafe_allow_html=True)    
  st.write("At Airbnb Insights, we dive deep into the data generated by this vast platform to uncover trends, patterns, and insights that can benefit both hosts and travelers. Using cutting-edge tools like Power BI and Tableau to analyze and visualize Airbnb data, providing valuable information to our users.")
  st.markdown('__<p style="text-align:left; font-size: 10px; color: #FDFEFE ">:black[Explore Airbnb Like Never Before] </P>__',
                unsafe_allow_html=True) 
  st.write("Join us on a journey through the world of Airbnb. Explore our interactive dashboards, discover fascinating trends, and gain a deeper understanding of the ever-changing landscape of hospitality. Whether you're a seasoned Airbnb user or new to the platform, Airbnb Insights has something for everyone.")
  st.success(" Ready to embark on your data-driven Airbnb adventure? Start exploring now!")
 with col2:
     st_lottie("https://lottie.host/40b972ac-b03c-4b73-b9db-629064bcf434/uNtx5FKkXy.json",width=150,height=150)
     st.image("tag (2).png",width=150)
     


if selected == "PowerBI":
 st.markdown('__<p style="text-align:left; font-size: 40px; color: #FDFEFE ">:black[Welcome to PowerBI dashboard!] </P>__',
                unsafe_allow_html=True)
 st.caption("Please scroll below to access the PowerBI dashboard featuring Airbnb data visualizations.")
 connection = psycopg2.connect(host="localhost", user="postgres", password="vengatesh", port=5432, database="airbnb")
 cursor = connection.cursor()

 report_name = st.selectbox("Select Power BI Report", ["Airbnb Report","Airbnb Report2"])
 query = f"SELECT embed_code FROM power_bi_reports WHERE report_name = %s"
 cursor = connection.cursor()
 cursor.execute(query, (report_name,))

# Fetch the result
 result = cursor.fetchone()

# Check if a result was found
 if result:
    embed_code = result[0]
    # Display the Power BI report in an iframe
    st.markdown(embed_code, unsafe_allow_html=True)
    
 else:
    st.warning("No matching report found.")

# Close the PostgreSQL connection
 cursor.close()
 connection.close()
 
if selected == "Tableau":
 st.markdown('__<p style="text-align:left; font-size: 40px; color: #FDFEFE ">:black[Welcome to Tableau dashboard!] </P>__',
                unsafe_allow_html=True)
 st.caption("Please scroll below to access the Tableau dashboard featuring Airbnb data visualizations.")
 def main():
    report_choice = st.selectbox("Select a report:", ["Airbnb Report 1", "Airbnb Report 2"])
    if report_choice == "Airbnb Report 1":
     st.markdown('__<p style="text-align:left; font-size: 70px; color: #FDFEFE ">:black[Report 1] </P>__',
                unsafe_allow_html=True)
     #html_temp = """<div class='tableauPlaceholder' id='viz1694279710185' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ve&#47;VengatesanK&#47;Dashboard1&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='VengatesanK&#47;Dashboard1' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ve&#47;VengatesanK&#47;Dashboard1&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1694279710185');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.maxWidth='1900px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';vizElement.style.maxHeight='1027px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.maxWidth='1900px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';vizElement.style.maxHeight='1027px';} else { vizElement.style.width='100%';vizElement.style.height='2977px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>"""
     html_temp = """<div class='tableauPlaceholder' id='viz1694591890828' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;fi&#47;final1_16945886300260&#47;Dashboard1&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='final1_16945886300260&#47;Dashboard1' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;fi&#47;final1_16945886300260&#47;Dashboard1&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1694591890828');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.maxWidth='1950px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';vizElement.style.maxHeight='1240px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.maxWidth='1950px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';vizElement.style.maxHeight='1240px';} else { vizElement.style.width='100%';vizElement.style.height='3177px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>"""
     components.html(html_temp, width=1370, height=1200)
    elif report_choice == "Airbnb Report 2":
     st.markdown('__<p style="text-align:left; font-size: 70px; color: #FDFEFE ">:black[Report 2] </P>__',
                unsafe_allow_html=True)
     #html_temp_2 = """<div class='tableauPlaceholder' id='viz1694400711877' style='position: relative'><noscript><a href='#'><img alt='Dashboard 2 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;do&#47;doubt_16944005737850&#47;Dashboard2&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='doubt_16944005737850&#47;Dashboard2' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;do&#47;doubt_16944005737850&#47;Dashboard2&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1694400711877');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='1300px';vizElement.style.maxWidth='100%';vizElement.style.minHeight='1027px';vizElement.style.maxHeight=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='1300px';vizElement.style.maxWidth='100%';vizElement.style.minHeight='1027px';vizElement.style.maxHeight=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='2677px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>"""
     html_temp_2 = """"<div class='tableauPlaceholder' id='viz1694592731641' style='position: relative'><noscript><a href='#'><img alt='Dashboard 2 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;fi&#47;final2_16945927078510&#47;Dashboard2&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='final2_16945927078510&#47;Dashboard2' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;fi&#47;final2_16945927078510&#47;Dashboard2&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1694592731641');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.maxWidth='1950px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';vizElement.style.maxHeight='1050px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.maxWidth='1950px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';vizElement.style.maxHeight='1040px';} else { vizElement.style.width='100%';vizElement.style.height='2627px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>"""
     components.html(html_temp_2, width=1370, height=1200)
    

 if __name__ == "__main__":    
    main()

if selected == "Python":
    
    df = pd.read_csv(r"C:/Users/VENKA/Desktop/Data Science/Python Anaconda/Project/airbnb_analysis1.csv")

    st.markdown('__<p style="text-align:left; font-size: 40px; color: #FDFEFE ">:black[Welcome to Python dashboard using Plotly & Matplotlib libraries!] </P>__',
                unsafe_allow_html=True)

    col1,col2,col3=st.columns([4,3,3])
    with col1:
     countries = ['All'] + list(df['country'].unique())
     selected_country = st.selectbox("Select Country", countries)
    with col2:
     neighbourhoods = ['All'] + list(df['street2.1'].unique())
     selected_neighbourhood = st.selectbox("Select Neighbourhood", neighbourhoods)
    with col3:
     room = ['All'] + list(df['room_type'].unique())
     selected_room = st.selectbox("Select Room type", room)

# Filter the dataset based on user selections
    if selected_country != 'All':
      df = df[df['country'] == selected_country]
    if selected_neighbourhood!= 'All':
      df = df[df['street2.1'] == selected_neighbourhood]
    if selected_room != 'All':
      df = df[df['room_type'] == selected_room]

    st.markdown('__<p style="text-align:left; font-size: 22px; color: #FDFEFE ">:black[Details table] </P>__',
                unsafe_allow_html=True)
    st.dataframe(df[['_id', 'name','bedrooms','bathrooms', 'host_name','price','street2.1','country','security_deposit','review_scores_value','cleaning_fee']])
    add_vertical_space(2)
# Create Plotly charts based on filtered data
    fig1 = px.bar(df, x='host_name', y='price', title=f'Price by Host in {selected_neighbourhood}')
    st.plotly_chart(fig1,use_container_width=True)
    add_vertical_space(2)
    fig2 = px.scatter(df, x='country', y='price', color='street2.1', title='Price by Country')
    st.plotly_chart(fig2,use_container_width=True)
    add_vertical_space(4) 
    if 'country' in df.columns:
      fig3 = px.sunburst(df, path=['country','room_type'], values='price', color_continuous_scale='RdBu_r')
      fig3.update_layout(title="Sunburst Chart for Room types and country",
                       margin=dict(l=0, r=0, b=0, t=40))
      st.plotly_chart(fig3,use_container_width=True)
    else:
      st.write("The 'country' column does not exist in the DataFrame.")
    add_vertical_space(4)  
    fig4 = px.scatter_geo(df, 
                     lat='latitude', 
                     lon='longitude',
                     color='price',  # Color the markers by price
                     color_continuous_scale= 'rainbow',  # Choose a color scale
                     hover_name= 'suburb',  # Display location name on hover
                     size_max=15)  # Max marker size

    fig4.update_geos( resolution=50,
    showcoastlines=True, coastlinecolor="RebeccaPurple",
    showland=True, landcolor="LightGreen",
    showocean=True, oceancolor="LightBlue",
    showlakes=True, lakecolor="Blue",
    showrivers=True, rivercolor="Blue")  # Choose a map projection
    fig4.update_layout(title='Choropleth Map of Price by Location')

    st.plotly_chart(fig4,use_container_width=True)
    add_vertical_space(1)
    fig5 = make_subplots(rows=1, cols=2, subplot_titles=('Security Deposit', 'Cleaning Fee'))

    hist1 = go.Histogram(x=df['security_deposit'], name='Security Deposit', marker_color='blue')
    fig5.add_trace(hist1, row=1, col=1)
    add_vertical_space(2)
# Add the cleaning fee histogram to the second subplot
    hist2 = go.Histogram(x=df['cleaning_fee'], name='Cleaning Fee', marker_color='green')
    fig5.add_trace(hist2, row=1, col=2)

# Customize the layout
    fig5.update_layout(
    title='Security Deposit and Cleaning Fee Distribution',
    xaxis=dict(title_text='Amount'),
    yaxis=dict(title_text='Count'))

# Display the subplots
    st.plotly_chart(fig5,use_container_width=True)
    add_vertical_space(2)
    df_sorted = df.sort_values(by='number_of_reviews', ascending=False)

# Select the top N hosts with the most reviews (you can change N as needed)
    N = 10  # For example, select the top 10 hosts
    top_hosts = df_sorted.head(N)

# Create a bar chart to visualize the top hosts with the most reviews
    fig6 = go.Figure()
    fig6.add_trace(go.Bar(
    x=top_hosts['host_name'],
    y=top_hosts['number_of_reviews'],
    marker_color='lightseagreen' # Customize the color of the bars
    ))

# Customize the layout
    fig6.update_layout(
    xaxis_title='Host Name',
    yaxis_title='Number of Reviews',
    title=f'Top {N} Hosts with the Most Reviews',
    xaxis_tickangle=45  # Rotate x-axis labels for better readability
    )

# Display the bar chart
    st.plotly_chart(fig6,use_container_width=True)
    add_vertical_space(2)

    st.markdown('__<p style="text-align:left; font-size: 22px; color: #FDFEFE ">:black[Number Of Room and Property types] </P>__',
                unsafe_allow_html=True)
    col1, col2 = st.columns([5,5])

    with col1:
     custom_colors = ['red', 'green', 'blue']
     room_type_counts = df['room_type'].value_counts()
     fig, ax = plt.subplots(figsize=(12, 6.5))
     ax.grid(axis='x', linestyle='-', alpha=0.4)
     ax.grid(axis='y', linestyle='-', alpha=0.4)
     ax.bar(room_type_counts.index, room_type_counts.values, color=custom_colors)
     ax.set_title('Room type')
     ax.set_xlabel('Room Type')
     ax.set_ylabel('Count')
     st.pyplot(fig)

# Plot 2: Count Plot of Property Types (Top 10)
    with col2:
     custom_colors = ['red', 'green', 'blue']
     top_10_property_types = df['property_type'].value_counts().head(10)
     fig, ax = plt.subplots(figsize=(12, 7))
     ax.set_title('Property type')
     ax.barh(top_10_property_types.index, top_10_property_types.values, color=custom_colors)
     ax.grid(axis='x', linestyle='-', alpha=0.4)
     ax.grid(axis='y', linestyle='-', alpha=0.4)
     ax.set_xlabel('Count')
     ax.set_ylabel('Property Type')
     st.pyplot(fig)
    
   
    sorted_df = df.sort_values(by='price')
    num_highest_prices = 5
    highest_price_df = sorted_df.tail(num_highest_prices)

    num_lowest_prices = 5
    lowest_price_df = sorted_df.head(num_lowest_prices)

 
    highest_price_fig = px.bar(highest_price_df, x='property_type', y='price', title='Highest-Priced Property Types',color='price')
    highest_price_fig.update_xaxes(title_text='Property Type')
    highest_price_fig.update_yaxes(title_text='Price')

    lowest_price_fig = px.bar(lowest_price_df, x='property_type', y='price', title='Lowest-Priced Property Types')
    lowest_price_fig.update_xaxes(title_text='Property Type')
    lowest_price_fig.update_yaxes(title_text='Price')

    fig = make_subplots(rows=1, cols=2, subplot_titles=['Highest-Priced Property Types', 'Lowest-Priced Property Types'])
    fig.add_trace(highest_price_fig.data[0], row=1, col=1)
    fig.add_trace(lowest_price_fig.data[0], row=1, col=2)
 
    fig.update_layout(showlegend=False, width=1300, height=500)
    
    
    st.markdown('__<p style="text-align:left; font-size: 22px; color: #FDFEFE ">:black[Property Price Analysis - High & Low] </P>__',
                unsafe_allow_html=True)
    
    st.plotly_chart(fig)  
  
  #------------------#  
    sorted_df1 = df.sort_values(by='price', ascending=False)

    num_highest_prices1 = 5
    highest_price_df1 = sorted_df1.head(num_highest_prices1)

    highest_price_fig1 = px.bar(highest_price_df1, y='name', x='price', title='Highest-Priced Name',color='price')
    highest_price_fig1.update_xaxes(title_text='Name')
    highest_price_fig1.update_yaxes(title_text='Price')
 
    sorted_df2 = df.sort_values(by='price')

    num_lowest_prices1 = 5
    lowest_price_df1 = sorted_df2.head(num_lowest_prices1)

    lowest_price_fig1 = px.bar(lowest_price_df1, y='name', x='price', title='Lowest-Priced Property Name')
    lowest_price_fig1.update_xaxes(title_text='Name')
    lowest_price_fig1.update_yaxes(title_text='Price')

    fig = make_subplots(rows=1, cols=2, subplot_titles=['Highest-Priced Room Name', 'Lowest-Priced Room Name'], shared_xaxes=True, vertical_spacing=0.5, horizontal_spacing=0.7)
    fig.add_trace(highest_price_fig1['data'][0], row=1, col=1)
    fig.add_trace(lowest_price_fig1['data'][0], row=1, col=2)
    fig.update_layout(showlegend=False, width=1200, height=500)
    st.markdown('__<p style="text-align:left; font-size: 22px; color: #FDFEFE ">:black[Room Price Analysis - High & Low] </P>__',
                unsafe_allow_html=True)

    st.plotly_chart(fig)

                     
 